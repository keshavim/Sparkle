# project build file
# generated with premake ninja

ninja_required_version = 1.6

# core rules for Release
CFLAGS= -MD -MP -m64 -O2 -DSPRK_RELEASE
rule cc
  command = gcc $CFLAGS -x c -MF $out.d -c -o $out $in
  description = cc $out
  depfile = $out.d
  deps = gcc

CXXFLAGS= -MD -MP -m64 -O2 -std=c++20 -DSPRK_RELEASE
rule cxx
  command = g++ $CXXFLAGS -x c++ -MF $out.d -c -o $out $in
  description = cxx $out
  depfile = $out.d
  deps = gcc

CFLAGS= -MD -MP -m64 -O2 -DSPRK_RELEASE
rule clangtidy_cc
  command = clang-tidy $in -- -x c $CFLAGS &&$
            gcc $CFLAGS -x c -MF $out.d -c -o $out $in
  description = cc $out
  depfile = $out.d
  deps = gcc

CXXFLAGS= -MD -MP -m64 -O2 -std=c++20 -DSPRK_RELEASE
rule clangtidy_cxx
  command = clang-tidy $in -- -x c++ $CFLAGS &&$
            g++ $CXXFLAGS -x c++ -MF $out.d -c -o $out $in
  description = cxx $out
  depfile = $out.d
  deps = gcc

RESFLAGS =  -DSPRK_RELEASE
rule rc
  command = windres -i $in -o $out $RESFLAGS
  description = rc $out

rule ar
  command = ar rcs $out $in
  description = ar $out

rule copy
  command = cp -f $in $out
  description = copy $in $out

rule custom_command
  command = $CUSTOM_COMMAND
  description = $CUSTOM_DESCRIPTION

# build files
build bin-int/Release/linux-x86_64/Sparkle/engine.o: cxx Sparkle/src/Core/engine.cpp

# link static lib
build bin/Release/linux-x86_64/Sparkle/libSparkle.a: ar bin-int/Release/linux-x86_64/Sparkle/engine.o

build Sparkle_Release: phony bin/Release/linux-x86_64/Sparkle/libSparkle.a
